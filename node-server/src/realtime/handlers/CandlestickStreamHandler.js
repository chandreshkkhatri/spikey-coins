\\\nimport logger from \'../../utils/logger.js\';\n\n/**\n * @typedef {import(\'../../data/repositories/CandlestickRepository.js\').default} CandlestickRepository\n * @typedef {import(\'../../data/models/Candlestick.js\').Candlestick} Candlestick\n */\n\nclass CandlestickStreamHandler {\n  /**\n   * @param {Object} dependencies\n   * @param {CandlestickRepository} dependencies.candlestickRepository\n   */\n  constructor({ candlestickRepository }) {\n    this.candlestickRepository = candlestickRepository;\n  }\n\n  /**\n   * Handles incoming kline (candlestick) messages from Binance WebSocket.\n   * @param {Object} klineMessage - Kline object from Binance.\n   * Example message structure:\n   * {\n   *   \"e\": \"kline\",        // Event type\n   *   \"E\": 1672515782136,    // Event time\n   *   \"s\": \"BNBBTC\",       // Symbol\n   *   \"k\": {\n   *     \"t\": 1672515780000,  // Kline start time\n   *     \"T\": 1672515839999,  // Kline close time\n   *     \"s\": \"BNBBTC\",     // Symbol\n   *     \"i\": \"1m\",         // Interval\n   *     \"f\": 100,            // First trade ID\n   *     \"L\": 200,            // Last trade ID\n   *     \"o\": \"0.0010\",     // Open price\n   *     \"c\": \"0.0020\",     // Close price\n   *     \"h\": \"0.0025\",     // High price\n   *     \"l\": \"0.0015\",     // Low price\n   *     \"v\": \"1000\",       // Base asset volume\n   *     \"n\": 100,            // Number of trades\n   *     \"x\": false,          // Is this kline closed?\n   *     \"q\": \"1.0000\",     // Quote asset volume\n   *     \"V\": \"500\",        // Taker buy base asset volume\n   *     \"Q\": \"0.500\",      // Taker buy quote asset volume\n   *     \"B\": \"123456\"      // Ignore\n   *   }\n   * }\n   */\n  handleMessage(klineMessage) {\n    if (!klineMessage || !klineMessage.k) {\n      logger.warn(\'CandlestickStreamHandler: Invalid kline message received\', klineMessage);\n      return;\n    }\n\n    const klineData = klineMessage.k;\n\n    /** @type {Candlestick} */\n    const candlestick = {\n      openTime: klineData.t,\n      open: parseFloat(klineData.o),\n      high: parseFloat(klineData.h),\n      low: parseFloat(klineData.l),\n      close: parseFloat(klineData.c),\n      volume: parseFloat(klineData.v),\n      closeTime: klineData.T,\n      quoteAssetVolume: parseFloat(klineData.q),\n      numberOfTrades: klineData.n,\n      takerBuyBaseAssetVolume: parseFloat(klineData.V),\n      takerBuyQuoteAssetVolume: parseFloat(klineData.Q),\n      isClosed: klineData.x, // Important: only append if closed, or handle updates to open candle\n    };\n\n    const symbol = klineData.s.toLowerCase(); // Normalize symbol\n    const interval = klineData.i;\n\n    // logger.debug(\`CandlestickStreamHandler: Received kline for ${symbol} - ${interval}. Is closed: ${candlestick.isClosed}\`);\n\n    // The Binance stream sends updates for the current (not yet closed) candlestick.\n    // It also sends a final update when the candlestick is closed (klineData.x === true).\n    // We should append/update the candlestick in the repository.\n    // The CandlestickRepository.appendCandlestick method should handle if it needs to update the last candle or add a new one.\n    this.candlestickRepository.appendCandlestick(symbol, interval, candlestick);\n\n    // Optional: If only closed candles are desired for some operations, filter here or in repository\n    // if (candlestick.isClosed) { ... }\n  }\n\n  /**\n   * Returns the stream names this handler is interested in.\n   * This would be dynamically generated based on MAJOR_SYMBOLS and desired intervals.\n   * For this example, we assume the BinanceStreamManager will construct these.\n   * @returns {string[]} An empty array, as stream names are determined by BinanceStreamManager.\n   */\n  getStreamNames() {\n    // This method might not be strictly needed if BinanceStreamManager itself constructs the stream names\n    // based on constants and passes messages directly. However, it can be useful for introspection or\n    // if handlers were to dynamically subscribe/unsubscribe.\n    return []; // The actual stream names are like `symbol@kline_interval`\n  }\n}\n\nexport default CandlestickStreamHandler;\n\\\'
