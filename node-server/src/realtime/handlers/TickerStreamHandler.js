\\\nimport logger from \'../../utils/logger.js\';\nimport { MAJOR_SYMBOLS } from \'../../config/constants.js\';\n\n/**\n * @typedef {import(\'../../services/MarketDataService.js\').default} MarketDataService\n * @typedef {import(\'../../services/DataSyncService.js\').default} DataSyncService\n */\n\nclass TickerStreamHandler {\n  /**\n   * @param {Object} dependencies\n   * @param {MarketDataService} dependencies.marketDataService\n   * @param {DataSyncService} dependencies.dataSyncService\n   */\n  constructor({ marketDataService, dataSyncService }) {\n    this.marketDataService = marketDataService;\n    this.dataSyncService = dataSyncService;\n    this.majorSymbolsSet = new Set(MAJOR_SYMBOLS.map(s => s.toUpperCase())); // Ensure uppercase for comparison with Binance data\n  }\n\n  /**\n   * Handles incoming ticker array messages from Binance WebSocket.\n   * @param {Array<Object>} rawTickerArray - Array of ticker objects from Binance.\n   */\n  async handleMessage(rawTickerArray) {\n    if (!Array.isArray(rawTickerArray)) {\n      logger.warn(\'TickerStreamHandler: Expected an array of tickers, received:\', typeof rawTickerArray);\n      return;\n    }\n\n    // Filter for major symbols if necessary, or process all\n    // For now, we assume the stream `!ticker@arr` sends all, and we might want to process all\n    // or filter based on a dynamic list later. The current `MAJOR_SYMBOLS` is for initial data fetching.\n    // This handler will process whatever Binance sends on `!ticker@arr`.\n\n    // logger.debug(\`TickerStreamHandler: Received ${rawTickerArray.length} tickers.\`);\n\n    try {\n      const coingeckoDataMap = await this.dataSyncService.getCurrentCoinGeckoDataMap();\n      if (!coingeckoDataMap || coingeckoDataMap.size === 0) {\n        logger.warn(\'TickerStreamHandler: CoinGecko data map is not available or empty. Tickers may not be fully enriched.\');\n      }\n      await this.marketDataService.processAndStoreEnrichedTickers(rawTickerArray, coingeckoDataMap);\n      // logger.debug(\'TickerStreamHandler: Successfully processed and stored enriched tickers.\');\n    } catch (error) {\n      logger.error(\`TickerStreamHandler: Error processing ticker array: ${error.message}\`, { error });\n    }\n  }\n\n  /**\n   * Returns the stream names this handler is interested in.\n   * In this case, it\'s the aggregate stream for all 24hr tickers.\n   * @returns {string[]}\n   */\n  getStreamNames() {\n    return [\'!ticker@arr\']; // Stream for 24hr Mini Ticker statistics for all symbols\n  }\n}\n\nexport default TickerStreamHandler;\n\\\'
